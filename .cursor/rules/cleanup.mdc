---
description: 
globs: 
alwaysApply: false
---
**Project Cleanup: Node.js to ASP.NET Migration**

Let's thoroughly clean up the project after migrating from Node.js to ASP.NET:

1. **Backend Cleanup:**
   - Identify and remove any leftover Node.js server code
   - Ensure all API endpoints are properly implemented in ASP.NET
   - Remove redundant code while preserving functionality
   - Clean up configuration files specific to Node.js
   - Verify environment variables and settings are properly configured for ASP.NET

2. **Frontend Cleanup:**
   - Remove all Node.js server dependencies from package.json including:
     - drizzle-orm, express, passport, connect-pg-simple, etc.
     - Associated dev dependencies (@types/express, etc.)
   - Ensure remaining dependencies have compatible versions after cleanup
   - Replace any database schema files (like schema.ts) with clean TypeScript interfaces
   - Update API call patterns to work with ASP.NET endpoints
   - Remove any Node.js-specific code patterns
   - Check for hardcoded URLs or paths that might reference the old server
   - Maintain consistent naming conventions between frontend calls and backend endpoints

3. **File Structure Reorganization:**
   - Remove server-specific directories that are no longer needed (e.g., `/server`, `/routes`, `/middleware`, `/share`)
   - Create a clean types directory for shared interfaces between frontend and backend
   - Organize frontend components using a consistent pattern (e.g., feature-based or atomic design)
   - Relocate any misplaced files to their appropriate directories
   - Delete all empty directories after removing unused files
   - Review and update import paths throughout the codebase to reflect the new structure
   - **Think ahead**: Structure the codebase to accommodate future dashboard enhancements and added functionality

4. **Build and Configuration Verification:**
   - Verify the build process works correctly after dependency cleanup
   - Check all configuration files for outdated settings
   - Test the application builds properly in both development and production modes
   - Ensure all environment-specific configurations are updated for ASP.NET

5. **Testing Setup:**
   - Update any test configurations that might reference Node.js endpoints
   - Ensure tests are configured to target ASP.NET endpoints 
   - Fix or remove obsolete tests that specifically tested Node.js functionality
   - Verify that frontend unit tests still work with the new backend
   - Add or update integration tests for critical paths
   - Establish performance baselines before and after cleanup

6. **Linting and Format Consistency:**
   - Update ESLint/TSLint rules if necessary for the new architecture
   - Run linting on all frontend code to ensure consistency
   - Fix any linting errors that may have been introduced during migration
   - Ensure consistent code style across new and migrated components

7. **Documentation:**
   - Document significant changes made during the cleanup
   - Create brief migration notes to explain the transition from Node.js to ASP.NET
   - Update README files as needed to reflect the new architecture

8. **Follow these principles:**
   - Read code principles before starting
   - Create a backup or commit the current state before beginning
   - Identify existing functionalities before removing code
   - Be at least 95% confident that changes won't break functionality
   - Ensure zero duplication of functionality
   - Organize the code structure for future enhancements





