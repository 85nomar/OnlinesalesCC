---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---

# 🧠 Order Management Dashboard – Clean Setup Prompt for Cursor

## 🏗️ Project Goal

Rebuild the **Order Management Dashboard** as a clean, modern React + TypeScript app using the real **.NET backend** (no mock data). This dashboard helps users track orders, handle delays, manage tickets, and communicate with customers.

---

## ✅ Core Objectives

- 🔥 Start **from scratch** – remove all legacy or mock-based code
- ⚙️ Integrate the **.NET REST API** backend
- 🧩 Use a **feature-based architecture**
- 🔄 **Do not restructure** backend data – only map to clean types
- 💬 Re-implement the **autosuggest ticket form** with intelligent validation

---

## 🧭 Pages to Implement

### 1. 📊 **Grouped Orders Page** `/open-orders`

- Source: `/api/orders/grouped`
- Show: `ArtikelNr`, `Artikel`, `Hrs`, `WgrNo`, `Anzahl`, `Erstelldatum`, `AnzahlTickets`
- Merge `/api/orders/additional` into view
- Features:
  - Color-coded delivery status
  - Click row → `/order-details/:itemNumber`
  - Click ticket count → **modal with tickets**
  - Edit delivery date / add alternative items

---

### 2. 🔍 **Order Details Page** `/order-details/:itemNumber`

- Source: `/api/orders?artikelNr=`
- Shows:
  - All individual orders
  - New delivery date
  - Alternative items (add/remove)
  - Send email modal

---

### 3. 🎫 **Tickets Page** `/tickets`

- Source: `/api/tickets`
- Table: Ticket ID, ArtikelNr, BestellNr, Comment, User, Date
- Full CRUD via modals
- Autosuggestion for ArtikelNr ↔ BestellNr

---

### 4. 🧾 **Grouped Tickets Modal**

- Triggered from ticket count in Grouped Orders Page
- Filters tickets by selected `ArtikelNr`
- Read-only table

---

## 🔁 Backend Mapping (German → English)

| Backend           | Frontend           |
|------------------|--------------------|
| `ArtikelNr`      | `itemNumber`       |
| `BestellNr`      | `orderNumber`      |
| `Artikel`        | `itemName`         |
| `Hrs`            | `brand`            |
| `Anzahl`         | `quantity`         |
| `WgrNo`          | `productGroup`     |
| `Erstelldatum`   | `createdAt`        |
| `Kommentar`      | `comment`          |
| `Entrydate`      | `entryDate`        |

Create mapping functions like `mapTicket`, `mapOpenOrder`, `mapGroupedOrder`.

---

## 🔎 Ticket Form: Autosuggestion & Failsafe

- `ArtikelNr` input shows matching `BestellNr` list (and vice versa)
- Only valid combinations allowed
- Failsafe: Invalid combos = block submission + show toast
- Min. 4 digits for both numbers
- Form: `itemNumber`, `orderNumber`, `comment`

---

## 📁 Architecture & Code Structure

src/ 
├── features/ 
│ ├── tickets/ 
│ ├── orders/ 
│ ├── email/ 
│ └── common/ 
├── components/ 
│ ├── ui/ 
│ ├── tickets/ 
├── layouts/ 
├── pages/ 
│ ├── open-orders/ 
│ ├── order-details/ 
│ ├── tickets/ 
│ └── home/ 
├── lib/ 
│ ├── apiClient.ts 
│ ├── queryClient.ts 
│ ├── utils.ts 
│ └── validationSchemas.ts
---

## 🧠 Technical Requirements

- ⚛️ React 18 + TypeScript
- ⚡ Vite
- 💅 Tailwind CSS + SCSS
- 📦 Zustand (if needed)
- 🔁 React Query (TanStack)
- 🎛️ Radix UI
- ✅ Zod for validation
- 🌍 i18n (en/de)

---

## 🎨 UI/UX Design

- ✅ **2025-level UI** — modern, responsive, minimal
- 🎨 Light/Dark mode toggle
- 🎯 Accent color: `#df0000`
- 🖼️ Theme-specific logos:
  - Light: `MM_LOGO-RGB.svg`, `MM-Wirbel-rgb-red.svg`
  - Dark: `MM_LOGO-white.svg`, `MM-Wirbel-rgb-white.svg`
- 📚 Clickable breadcrumbs on every page
- 🧱 Consistent layout + spacing
- 🔄 Sidebar collapsible, expands on hover
- 📈 Universal DataTable with:
  - Pagination
  - Sorting
  - Search & filters
  - Empty / loading / error states

---

## 🔐 Authentication (Placeholder)

- No auth required yet
- Leave placeholder logic for future login
- Store `byUser` field on ticket creation

---

## 📬 Email Modal

- Sends bulk or specific order emails
- Modal form with:
  - Subject
  - Message
  - Recipient selection
- Uses `/api/email`
- Preview + toast feedback

---

## ⚙️ Performance

- Must handle **100,000+ orders**
- Use backend-powered pagination and search
- **Never load full datasets into memory**
- Use `take`, `skip`, `wgrNo`, `artikelNr`, etc.
- Optimize all API calls + caching

---

## 🧼 Final Cleanup Instructions
- ✅ Only use real backend integration
- ✅ Maintain clear and consistent naming throughout

